" Theme

" set mouse=a
set nowrap
set textwidth=0
set visualbell
syntax enable

" Search Highlight
" Move to the first match (ggn), last (GN), next (n) or previous (N) as usual.
set hlsearch
" nnoremap <silent> <Leader>f :TestFile<CR>

" HighLight current line
set cursorline

" Enable relative number
set relativenumber

set lazyredraw

" ===== altercation/vim-colors-solarized =====
set background=light
colorscheme solarized
let g:enable_bold_font = 1
let g:enable_italic_font = 1
" ===== altercation/vim-colors-solarized =====

"clipboard
if has("clipboard")
  if has("unnamedplus")
    " When possible use + register for copy-paste
    set clipboard=unnamed,unnamedplus
  else
    " On mac and Windows, use * register for copy-paste
    set clipboard=unnamed
  endif
endif

" ALE
let g:ale_cache_executable_check_failures = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
" Run linters when files are saved
let g:ale_lint_on_save = 1
" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0

autocmd! ale
autocmd VimEnter *
      \ set updatetime=1000 |
      \ ALEEnable

" NerdTree
map <C-n> :NERDTreeToggle<CR>
map <Leader>f :NERDTreeFind<CR>
let g:NERDSpaceDelims = 1
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" vim-jsx
let g:jsx_ext_required = 0


" rust.vim
let g:rustfmt_autosave = 1

" Copy filename to clipboard

" name of file ('tail')
nnoremap <silent> <Leader>cfn :let @*=expand('%:t')<CR>
" directory/name of file (relative to the current working directory of
nnoremap <silent> <Leader>crp :let @*=expand("%")<CR>
" full path
nnoremap <silent> <Leader>cfp :let @*=expand("%:p")<CR>

" Tab Completion
" will insert tab at beginning of line,
" will use completion if not at beginning
" set wildmode=list:longest,list:full
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<Tab>"
"     else
"         return "\<C-n>"
"     endif
" endfunction
" inoremap <Tab> <C-r>=InsertTabWrapper()<CR>
" inoremap <S-Tab> <C-p>


" Use tab for trigger completion with characters ahead and navigate.
 " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
 inoremap <silent><expr> <TAB>
       \ pumvisible() ? "\<C-n>" :
       \ <SID>check_back_space() ? "\<TAB>" :
       \ coc#refresh()
 inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

 function! s:check_back_space() abort
   let col = col('.') - 1
   return !col || getline('.')[col - 1]  =~# '\s'
 endfunction
